extend layout-noheader
block head
  link(href='/static/css/table.css', rel='stylesheet')
  script(src='/static/js/react.min.js')
  script(src='/static/js/table.js')
  style.
    .results-table th,
    .results-table td {
      text-align: center;
    }
    .results-table td {
      width: 33%;
    }
    
block content
  .page-header
    h1
      span.pull-right.dropdown
        button.btn.btn-primary.dropdown-toggle(type='button', data-toggle="dropdown", 
                aria-haspopup="true", aria-expanded="false", id='advanced-menu')
          span.glyphicon.glyphicon-cloud-download
          .sr-only Download data
        ul.dropdown-menu(aria-labelledby="advanced-menu")
          li
            a(href='/export/#{poll.slug}/results')
              | Download results 
              small (JSON)
          li
            a(href='/export/#{poll.slug}/poll')
              | Download poll 
              small (JSON)
          li 
            a(href='/export/#{poll.slug}/ballots')
              | Download ballots 
              small (JSON)
      | Results of 
      = poll.title

  .row
    .col-md-12
      .alert.alert-info
        strong= totalCompleteBallots
        |  ballots received out of a potential total of 
        strong= poll.emailsSent.length
        |  (#{(totalCompleteBallots / poll.emailsSent.length * 100).toFixed(2)}%).
      if poll.results.motions
        h2 Motions
        table.table
          thead
            tr
              th Motion
              th For
              th Against
              th Abstain
              th Threshold
              th % in favour
              th Result
          tbody
            each motion in poll.results.motions
              tr
                td
                  strong= motion.id
                td.text-success= motion.counts.aye
                td.text-danger= motion.counts.nay
                td.text-warning= motion.counts.abstain
                td= motion.threshold
                td= motion.result.percentage
                if motion.result.success
                  td.success Carried
                else
                  td.danger Lapsed
      if poll.results.elections
        h2 Elections
        each election in poll.results.elections
          .panel.panel-default
            .panel-heading
              .row
                h3.col-md-6.panel-title= election.id
                div.col-md-6.text-right
                  ul.list-inline(style='margin: 0')
                    li
                      small
                        strong Method: 
                        span= election.method
                    li
                      small
                        strong Winners: 
                        span= election.winners
            .panel-body
              .row
                .col-md-6
                  h4 Rankings
                  ol
                    each c in election.order
                      li= c
                  if election.data.invalids
                    p
                      strong Invalid ballots: 
                      = election.data.invalids
                .col-md-6.text-right
                  div(style='display: inline-block', data-election=election.id)
                  script.
                    React.render(React.createElement(SchulzeTable, {data: {
                      candidates: !{JSON.stringify(election.order)},
                      values: !{JSON.stringify(election.data.orderedScores)}
                    }}), $("[data-election='#{election.id}']")[0]);
       div
         .alert.alert-info.text-center
           p
             strong End of results.
           p
             | Generation started on 
             strong 
               time(datetime="#{poll.results.ts.start.toISOString()}").
                 #{moment(poll.results.ts.start).format('D MMM YYYY, HH:MM:SSZ')}
             |  and finished in 
             strong #{moment(poll.results.ts.finish).diff(poll.results.ts.start, 'seconds', true)}
             |  seconds.
