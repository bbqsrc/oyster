extend layout-noheader
block head
  link(href='/static/css/table.css', rel='stylesheet')
  script(src='/static/js/react.min.js')
  script(src='/static/js/table.js')
  style.
    .results-table th,
    .results-table td {
      text-align: center;
    }
    .results-table td {
      width: 33%;
    }
    
block content
  .page-header
    h1
      span.pull-right.dropdown
        button.btn.btn-primary.dropdown-toggle(type='button', data-toggle="dropdown", 
                aria-haspopup="true", aria-expanded="false", id='advanced-menu')
          span.glyphicon.glyphicon-cloud-download
          .sr-only= __("Download data")
        ul.dropdown-menu(aria-labelledby="advanced-menu")
          li
            a(href='/export/#{poll.slug}/results')
              = __("Download results")
              small  (JSON)
          li
            a(href='/export/#{poll.slug}/poll')
              = __("Download poll")
              small  (JSON)
          li 
            a(href='/export/#{poll.slug}/ballots')
              = __("Download ballots")
              small  (JSON)
      = __("Results of %s", poll.title)

  .row
    .col-md-12
      .alert.alert-info
        strong= totalCompleteBallots
        | 
        = __("ballots received out of a potential total of")
        | 
        strong= poll.emailsSent.length
        |  (#{(totalCompleteBallots / poll.emailsSent.length * 100).toFixed(2)}%).
      if poll.results.motions.length
        h2= __("Motions")
        table.table
          thead
            tr
              th= __("Motion")
              th= __("For")
              th= __("Against")
              th= __("Abstain")
              th= __("Threshold")
              th= __("% in favour")
              th= __("Result")
          tbody
            each motion in poll.results.motions
              tr
                td
                  strong= motion.id
                td.text-success= motion.counts.aye
                td.text-danger= motion.counts.nay
                td.text-warning= motion.counts.abstain
                td= motion.threshold
                td= motion.result.percentage
                if motion.result.success
                  td.success= __("Carried")
                else
                  td.danger= __("Lapsed")
      if poll.results.elections.length
        h2= __("Elections")
        each election in poll.results.elections
          .panel.panel-default
            .panel-heading
              .row
                h3.col-md-6.panel-title= election.id
                div.col-md-6.text-right
                  ul.list-inline(style='margin: 0')
                    li
                      small
                        strong
                          = __("Method")
                          | : 
                        span= election.method
                    li
                      small
                        strong
                          = __("Winners")
                          | : 
                        span= election.winners
            .panel-body
              .row
                .col-md-6
                  h4= __("Rankings")
                  ol
                    each c in election.order
                      li= c
                  if election.data.invalids
                    p
                      strong
                        = __("Invalid ballots")
                        | :
                      = election.data.invalids
                if election.method === "schulze"
                  .col-md-6.text-right
                    div(style='display: inline-block', data-election=election.id)
                    script.
                      React.render(React.createElement(SchulzeTable, {data: {
                        candidates: !{JSON.stringify(election.order)},
                        values: !{JSON.stringify(election.data.orderedScores)}
                      }}), $("[data-election='#{election.id}']")[0]);
                if election.method === "approval"
                  .col-md-6
                    table.table
                      thead
                        tr
                          th= __("Candidate")
                          th= __("Votes")
                          if election.threshold
                            th= __("Threshold met")
                          th= __("Result")
                      tbody
                        each c in election.order
                          tr 
                            td= c
                            td= election.data.scores[c]
                            if election.threshold
                              if election.data.thresholdMet[c]
                                td.success= __("Yes")
                                td.success Elected
                              else
                                td.danger= __("No")
                                td.danger Not elected
                            else
                              td STUB
      
      .alert.alert-info.text-center
        p
          strong= __("End of results.")
        p
          = __("Generation started on")
          | 
          strong 
            time(datetime="#{poll.results.ts.start.toISOString()}")
              = moment(poll.results.ts.start).format('D MMM YYYY, HH:mm:ssZ')
          | 
          = __("and finished in")
          | 
          strong= moment(poll.results.ts.finish).diff(poll.results.ts.start, 'seconds', true)
          | 
          = __("seconds.")
