//-
  Oyster, a free voting system.
  Copyright Â© 2015  Brendan Molloy <brendan@bbqsrc.net>

  This program is free software: you can redistribute it and/or modify
  it under the terms of the GNU Affero General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Affero General Public License for more details.

  You should have received a copy of the GNU Affero General Public License
  along with this program.  If not, see <http://www.gnu.org/licenses/>.
extend layout-noheader
block head
  link(href='/static/css/table.css', rel='stylesheet')
  script(src='/static/js/react.min.js')
  script(src='/static/js/table.js')
  style.
    .results-table th,
    .results-table td {
      text-align: center;
    }
    .results-table td {
      width: 33%;
    }
    
block content
  .page-header
    h1
      span.pull-right.dropdown
        button.btn.btn-primary.dropdown-toggle(type='button', data-toggle="dropdown", 
                aria-haspopup="true", aria-expanded="false", id='advanced-menu')
          span.glyphicon.glyphicon-cloud-download
          .sr-only= translate('results.download.data')
        ul.dropdown-menu(aria-labelledby="advanced-menu")
          li
            a(href='/export/#{poll.slug}/results')
              = translate('results.download.results')
              small  (JSON)
          li
            a(href='/export/#{poll.slug}/poll')
              = translate('results.download.poll')
              small  (JSON)
          li 
            a(href='/export/#{poll.slug}/ballots')
              = translate('results.download.ballots')
              small  (JSON)
      = translate("results.title", {title: poll.title})

  .row
    .col-md-12
      -
        var o = {
          received: totalCompleteBallots,
          total: poll.emailsSent.length,
          totalPercent: totalCompleteBallots / poll.emailsSent.length
        }
      .alert.alert-info!= translate("results.total", o)
      if poll.results.motions.length
        h2= translate("results.motions")
        table.table
          thead
            tr
              th= translate("results.motion")
              th= translate("results.for")
              th= translate("results.against")
              th= translate("results.abstain")
              th= translate("results.threshold")
              th= translate("results.percentInFavour")
              th= translate("results.result")
          tbody
            each motion in poll.results.motions
              tr
                td
                  strong= motion.id
                td.text-success= motion.counts.aye
                td.text-danger= motion.counts.nay
                td.text-warning= motion.counts.abstain
                td= motion.threshold
                td= motion.result.percentage
                if motion.result.success
                  td.success= translate("results.carried")
                else
                  td.danger= translate("results.lapsed")
      if poll.results.elections.length
        h2= translate("results.elections")
        each election in poll.results.elections
          .panel.panel-default
            .panel-heading
              .row
                h3.col-md-6.panel-title= election.id
                div.col-md-6.text-right
                  ul.list-inline(style='margin: 0')
                    li
                      small
                        strong
                          = translate("results.method")
                          | : 
                        span= election.method
                    li
                      small
                        strong
                          = translate("results.winners")
                          | : 
                        span= election.winners
            .panel-body
              .row
                .col-md-6
                  h4= translate("results.rankings")
                  ol
                    each c in election.order
                      li= c
                  if election.data.invalids
                    p
                      strong
                        = translate("results.invalidBallots")
                        | :
                      = election.data.invalids
                if election.method === "schulze"
                  .col-md-6.text-right
                    div(style='display: inline-block', data-election=election.id)
                    script.
                      React.render(React.createElement(SchulzeTable, {data: {
                        candidates: !{JSON.stringify(election.order)},
                        values: !{JSON.stringify(election.data.orderedScores)}
                      }}), $("[data-election='#{election.id}']")[0]);
                if election.method === "approval"
                  .col-md-6
                    table.table
                      thead
                        tr
                          th= translate("results.candidate")
                          th= translate("results.votes")
                          if election.threshold && election.threshold !== 'none'
                            th= translate("results.thresholdMet")
                          th= translate("results.result")
                      tbody
                        each c, i in election.order
                          tr 
                            td= c
                            td= election.data.scores[c]
                            if election.threshold && election.threshold !== 'none'
                              if election.data.thresholdMet[c]
                                td.success= translate("results.yes")
                              else
                                td.danger= translate("results.no")
                            
                            if election.data.thresholdMet[c] && i < election.winners
                              td.success= translate("results.elected")
                            else
                              td.danger= translate('results.notElected')
      
      .alert.alert-info.text-center
        p
          strong= translate('results.end')
        p!= translate('results.summary', { start: poll.results.ts.start, seconds: moment(poll.results.ts.finish).diff(poll.results.ts.start, 'seconds', true) })
          //-
            = __("Generation started on")
            | 
            strong 
              time(datetime="#{poll.results.ts.start.toISOString()}")
                = moment(poll.results.ts.start).format('D MMM YYYY, HH:mm:ssZ')
            | 
            = __("and finished in")
            | 
            strong= moment(poll.results.ts.finish).diff(poll.results.ts.start, 'seconds', true)
            | 
            = __("seconds.")
